/* tslint:disable */
/* eslint-disable */
/**
 * Портал Информзащита
 * Описание API для взаимодействия с порталом
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface DepartmentDto
 */
export interface DepartmentDto {
  /**
   * ID
   * @type {string}
   * @memberof DepartmentDto
   */
  id: string;
  /**
   * Имя
   * @type {string}
   * @memberof DepartmentDto
   */
  name: string;
  /**
   * Телефон
   * @type {string}
   * @memberof DepartmentDto
   */
  parentId?: string;
}
/**
 *
 * @export
 * @interface EmployeeDto
 */
export interface EmployeeDto {
  /**
   * ID
   * @type {string}
   * @memberof EmployeeDto
   */
  id: string;
  /**
   * Имя
   * @type {string}
   * @memberof EmployeeDto
   */
  name: string;
  /**
   * Телефон
   * @type {string}
   * @memberof EmployeeDto
   */
  phone: string;
  /**
   * Email
   * @type {string}
   * @memberof EmployeeDto
   */
  email: string;
  /**
   * Подразделение
   * @type {string}
   * @memberof EmployeeDto
   */
  departmentId?: string;
}
/**
 *
 * @export
 * @interface EmployeesListDto
 */
export interface EmployeesListDto {
  /**
   * Общее количество
   * @type {number}
   * @memberof EmployeesListDto
   */
  total: number;
  /**
   * Список элементов
   * @type {Array<EmployeeDto>}
   * @memberof EmployeesListDto
   */
  items: Array<EmployeeDto>;
}
/**
 *
 * @export
 * @interface Filter
 */
export interface Filter {
  /**
   * Имя фильтра
   * @type {string}
   * @memberof Filter
   */
  name: string;
  /**
   * Значение
   * @type {any}
   * @memberof Filter
   */
  value: any;
}
/**
 * Данные для входа.
 * @export
 * @interface LoginRequestBody
 */
export interface LoginRequestBody {
  /**
   * Имя пользователя
   * @type {string}
   * @memberof LoginRequestBody
   */
  login: string;
  /**
   * Пароль
   * @type {string}
   * @memberof LoginRequestBody
   */
  password: string;
}
/**
 *
 * @export
 * @interface NewsDto
 */
export interface NewsDto {
  /**
   * ID
   * @type {string}
   * @memberof NewsDto
   */
  id: string;
  /**
   * Заголовок
   * @type {string}
   * @memberof NewsDto
   */
  title: string;
  /**
   * Текст
   * @type {string}
   * @memberof NewsDto
   */
  text: string;
  /**
   * Ссылка на картинку
   * @type {string}
   * @memberof NewsDto
   */
  img: string;
  /**
   * Дата создания
   * @type {string}
   * @memberof NewsDto
   */
  date: string;
}
/**
 *
 * @export
 * @interface NewsListDto
 */
export interface NewsListDto {
  /**
   * Общее количество
   * @type {number}
   * @memberof NewsListDto
   */
  total: number;
  /**
   * Список элементов
   * @type {Array<NewsDto>}
   * @memberof NewsListDto
   */
  items: Array<NewsDto>;
}
/**
 *
 * @export
 * @interface Order
 */
export interface Order {
  /**
   * Имя поля
   * @type {string}
   * @memberof Order
   */
  type?: string;
  /**
   * Обратная сорировка
   * @type {boolean}
   * @memberof Order
   */
  desc: boolean;
}
/**
 *
 * @export
 * @interface ProfileDto
 */
export interface ProfileDto {
  /**
   * ID пользователя
   * @type {string}
   * @memberof ProfileDto
   */
  id: string;
  /**
   * Фио пользователя
   * @type {string}
   * @memberof ProfileDto
   */
  name: string;
  /**
   * Ссылка на фотографию пользователя
   * @type {string}
   * @memberof ProfileDto
   */
  avatar: string;
}
/**
 *
 * @export
 * @interface RequestBody
 */
export interface RequestBody {
  /**
   * Строка поиска
   * @type {string}
   * @memberof RequestBody
   */
  search?: string;
  /**
   *
   * @type {Order}
   * @memberof RequestBody
   */
  order?: Order;
  /**
   * Начать с номера элемента
   * @type {number}
   * @memberof RequestBody
   */
  skip: number;
  /**
   * Лимит количества
   * @type {number}
   * @memberof RequestBody
   */
  limit: number;
  /**
   *
   * @type {Array<Filter>}
   * @memberof RequestBody
   */
  filters?: Array<Filter>;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Метод проверяет авторизацию и возвращает то же самое, что вернул бы /login при успешной аутентификации.
     * @summary Получение данных текущей сессии
     * @param {LoginRequestBody} loginRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: async (loginRequestBody: LoginRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'loginRequestBody' is not null or undefined
      assertParamExists('getUser', 'loginRequestBody', loginRequestBody);
      const localVarPath = `/user`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(loginRequestBody, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Вход в систему по логину и паролю. Сервер устанавливает куку httpOnly secure с токеном, соответственно лиент не может ей управлять.
     * @summary Вход в систему
     * @param {LoginRequestBody} loginRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login: async (loginRequestBody: LoginRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'loginRequestBody' is not null or undefined
      assertParamExists('login', 'loginRequestBody', loginRequestBody);
      const localVarPath = `/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(loginRequestBody, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * При вызове сервер очищает куку с токеном пользователя.
     * @summary Завершение сессии
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/logout`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration);
  return {
    /**
     * Метод проверяет авторизацию и возвращает то же самое, что вернул бы /login при успешной аутентификации.
     * @summary Получение данных текущей сессии
     * @param {LoginRequestBody} loginRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUser(
      loginRequestBody: LoginRequestBody,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(loginRequestBody, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Вход в систему по логину и паролю. Сервер устанавливает куку httpOnly secure с токеном, соответственно лиент не может ей управлять.
     * @summary Вход в систему
     * @param {LoginRequestBody} loginRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async login(
      loginRequestBody: LoginRequestBody,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginRequestBody, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * При вызове сервер очищает куку с токеном пользователя.
     * @summary Завершение сессии
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async logout(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = AuthApiFp(configuration);
  return {
    /**
     * Метод проверяет авторизацию и возвращает то же самое, что вернул бы /login при успешной аутентификации.
     * @summary Получение данных текущей сессии
     * @param {LoginRequestBody} loginRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(loginRequestBody: LoginRequestBody, options?: any): AxiosPromise<ProfileDto> {
      return localVarFp.getUser(loginRequestBody, options).then((request) => request(axios, basePath));
    },
    /**
     * Вход в систему по логину и паролю. Сервер устанавливает куку httpOnly secure с токеном, соответственно лиент не может ей управлять.
     * @summary Вход в систему
     * @param {LoginRequestBody} loginRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(loginRequestBody: LoginRequestBody, options?: any): AxiosPromise<ProfileDto> {
      return localVarFp.login(loginRequestBody, options).then((request) => request(axios, basePath));
    },
    /**
     * При вызове сервер очищает куку с токеном пользователя.
     * @summary Завершение сессии
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout(options?: any): AxiosPromise<void> {
      return localVarFp.logout(options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for getUser operation in AuthApi.
 * @export
 * @interface AuthApiGetUserRequest
 */
export interface AuthApiGetUserRequest {
  /**
   *
   * @type {LoginRequestBody}
   * @memberof AuthApiGetUser
   */
  readonly loginRequestBody: LoginRequestBody;
}

/**
 * Request parameters for login operation in AuthApi.
 * @export
 * @interface AuthApiLoginRequest
 */
export interface AuthApiLoginRequest {
  /**
   *
   * @type {LoginRequestBody}
   * @memberof AuthApiLogin
   */
  readonly loginRequestBody: LoginRequestBody;
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
  /**
   * Метод проверяет авторизацию и возвращает то же самое, что вернул бы /login при успешной аутентификации.
   * @summary Получение данных текущей сессии
   * @param {AuthApiGetUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public getUser(requestParameters: AuthApiGetUserRequest, options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .getUser(requestParameters.loginRequestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Вход в систему по логину и паролю. Сервер устанавливает куку httpOnly secure с токеном, соответственно лиент не может ей управлять.
   * @summary Вход в систему
   * @param {AuthApiLoginRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public login(requestParameters: AuthApiLoginRequest, options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .login(requestParameters.loginRequestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * При вызове сервер очищает куку с токеном пользователя.
   * @summary Завершение сессии
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public logout(options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .logout(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * DepartmentsApi - axios parameter creator
 * @export
 */
export const DepartmentsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Получение всех данных новости
     * @summary Получение карточки новости
     * @param {string} id Идентификатор подразделения
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDepartmentById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getDepartmentById', 'id', id);
      const localVarPath = `/departments/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Эндпоинт для получения списка подразделений
     * @summary Получение списка подразделений
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDepartments: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/departments`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DepartmentsApi - functional programming interface
 * @export
 */
export const DepartmentsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DepartmentsApiAxiosParamCreator(configuration);
  return {
    /**
     * Получение всех данных новости
     * @summary Получение карточки новости
     * @param {string} id Идентификатор подразделения
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDepartmentById(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepartmentDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDepartmentById(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Эндпоинт для получения списка подразделений
     * @summary Получение списка подразделений
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDepartments(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DepartmentDto>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDepartments(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * DepartmentsApi - factory interface
 * @export
 */
export const DepartmentsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DepartmentsApiFp(configuration);
  return {
    /**
     * Получение всех данных новости
     * @summary Получение карточки новости
     * @param {string} id Идентификатор подразделения
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDepartmentById(id: string, options?: any): AxiosPromise<DepartmentDto> {
      return localVarFp.getDepartmentById(id, options).then((request) => request(axios, basePath));
    },
    /**
     * Эндпоинт для получения списка подразделений
     * @summary Получение списка подразделений
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDepartments(options?: any): AxiosPromise<Array<DepartmentDto>> {
      return localVarFp.getDepartments(options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for getDepartmentById operation in DepartmentsApi.
 * @export
 * @interface DepartmentsApiGetDepartmentByIdRequest
 */
export interface DepartmentsApiGetDepartmentByIdRequest {
  /**
   * Идентификатор подразделения
   * @type {string}
   * @memberof DepartmentsApiGetDepartmentById
   */
  readonly id: string;
}

/**
 * DepartmentsApi - object-oriented interface
 * @export
 * @class DepartmentsApi
 * @extends {BaseAPI}
 */
export class DepartmentsApi extends BaseAPI {
  /**
   * Получение всех данных новости
   * @summary Получение карточки новости
   * @param {DepartmentsApiGetDepartmentByIdRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DepartmentsApi
   */
  public getDepartmentById(requestParameters: DepartmentsApiGetDepartmentByIdRequest, options?: AxiosRequestConfig) {
    return DepartmentsApiFp(this.configuration)
      .getDepartmentById(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Эндпоинт для получения списка подразделений
   * @summary Получение списка подразделений
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DepartmentsApi
   */
  public getDepartments(options?: AxiosRequestConfig) {
    return DepartmentsApiFp(this.configuration)
      .getDepartments(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * EmployeesApi - axios parameter creator
 * @export
 */
export const EmployeesApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Получение всех данных сотрудника
     * @summary Получение карточки сотрудника
     * @param {string} id Идентификатор сотрудника
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmployeeById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getEmployeeById', 'id', id);
      const localVarPath = `/employees/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Эндпоинт для получения списка сотрудников с параметрами поиска
     * @summary Получение списка сотрудников
     * @param {RequestBody} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchEmployees: async (requestBody: RequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'requestBody' is not null or undefined
      assertParamExists('searchEmployees', 'requestBody', requestBody);
      const localVarPath = `/employees`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * EmployeesApi - functional programming interface
 * @export
 */
export const EmployeesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = EmployeesApiAxiosParamCreator(configuration);
  return {
    /**
     * Получение всех данных сотрудника
     * @summary Получение карточки сотрудника
     * @param {string} id Идентификатор сотрудника
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEmployeeById(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeeById(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Эндпоинт для получения списка сотрудников с параметрами поиска
     * @summary Получение списка сотрудников
     * @param {RequestBody} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchEmployees(
      requestBody: RequestBody,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeesListDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.searchEmployees(requestBody, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * EmployeesApi - factory interface
 * @export
 */
export const EmployeesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = EmployeesApiFp(configuration);
  return {
    /**
     * Получение всех данных сотрудника
     * @summary Получение карточки сотрудника
     * @param {string} id Идентификатор сотрудника
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmployeeById(id: string, options?: any): AxiosPromise<EmployeeDto> {
      return localVarFp.getEmployeeById(id, options).then((request) => request(axios, basePath));
    },
    /**
     * Эндпоинт для получения списка сотрудников с параметрами поиска
     * @summary Получение списка сотрудников
     * @param {RequestBody} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchEmployees(requestBody: RequestBody, options?: any): AxiosPromise<EmployeesListDto> {
      return localVarFp.searchEmployees(requestBody, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for getEmployeeById operation in EmployeesApi.
 * @export
 * @interface EmployeesApiGetEmployeeByIdRequest
 */
export interface EmployeesApiGetEmployeeByIdRequest {
  /**
   * Идентификатор сотрудника
   * @type {string}
   * @memberof EmployeesApiGetEmployeeById
   */
  readonly id: string;
}

/**
 * Request parameters for searchEmployees operation in EmployeesApi.
 * @export
 * @interface EmployeesApiSearchEmployeesRequest
 */
export interface EmployeesApiSearchEmployeesRequest {
  /**
   *
   * @type {RequestBody}
   * @memberof EmployeesApiSearchEmployees
   */
  readonly requestBody: RequestBody;
}

/**
 * EmployeesApi - object-oriented interface
 * @export
 * @class EmployeesApi
 * @extends {BaseAPI}
 */
export class EmployeesApi extends BaseAPI {
  /**
   * Получение всех данных сотрудника
   * @summary Получение карточки сотрудника
   * @param {EmployeesApiGetEmployeeByIdRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmployeesApi
   */
  public getEmployeeById(requestParameters: EmployeesApiGetEmployeeByIdRequest, options?: AxiosRequestConfig) {
    return EmployeesApiFp(this.configuration)
      .getEmployeeById(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Эндпоинт для получения списка сотрудников с параметрами поиска
   * @summary Получение списка сотрудников
   * @param {EmployeesApiSearchEmployeesRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmployeesApi
   */
  public searchEmployees(requestParameters: EmployeesApiSearchEmployeesRequest, options?: AxiosRequestConfig) {
    return EmployeesApiFp(this.configuration)
      .searchEmployees(requestParameters.requestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * NewsApi - axios parameter creator
 * @export
 */
export const NewsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Получение всех данных новости
     * @summary Получение карточки новости
     * @param {string} id Идентификатор новости
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNewsById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getNewsById', 'id', id);
      const localVarPath = `/news/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Эндпоинт для получения списка новостей с параметрами поиска
     * @summary Получение списка новостей
     * @param {RequestBody} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchNews: async (requestBody: RequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'requestBody' is not null or undefined
      assertParamExists('searchNews', 'requestBody', requestBody);
      const localVarPath = `/news`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * NewsApi - functional programming interface
 * @export
 */
export const NewsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = NewsApiAxiosParamCreator(configuration);
  return {
    /**
     * Получение всех данных новости
     * @summary Получение карточки новости
     * @param {string} id Идентификатор новости
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getNewsById(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NewsDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getNewsById(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Эндпоинт для получения списка новостей с параметрами поиска
     * @summary Получение списка новостей
     * @param {RequestBody} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchNews(
      requestBody: RequestBody,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NewsListDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.searchNews(requestBody, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * NewsApi - factory interface
 * @export
 */
export const NewsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = NewsApiFp(configuration);
  return {
    /**
     * Получение всех данных новости
     * @summary Получение карточки новости
     * @param {string} id Идентификатор новости
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNewsById(id: string, options?: any): AxiosPromise<NewsDto> {
      return localVarFp.getNewsById(id, options).then((request) => request(axios, basePath));
    },
    /**
     * Эндпоинт для получения списка новостей с параметрами поиска
     * @summary Получение списка новостей
     * @param {RequestBody} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchNews(requestBody: RequestBody, options?: any): AxiosPromise<NewsListDto> {
      return localVarFp.searchNews(requestBody, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for getNewsById operation in NewsApi.
 * @export
 * @interface NewsApiGetNewsByIdRequest
 */
export interface NewsApiGetNewsByIdRequest {
  /**
   * Идентификатор новости
   * @type {string}
   * @memberof NewsApiGetNewsById
   */
  readonly id: string;
}

/**
 * Request parameters for searchNews operation in NewsApi.
 * @export
 * @interface NewsApiSearchNewsRequest
 */
export interface NewsApiSearchNewsRequest {
  /**
   *
   * @type {RequestBody}
   * @memberof NewsApiSearchNews
   */
  readonly requestBody: RequestBody;
}

/**
 * NewsApi - object-oriented interface
 * @export
 * @class NewsApi
 * @extends {BaseAPI}
 */
export class NewsApi extends BaseAPI {
  /**
   * Получение всех данных новости
   * @summary Получение карточки новости
   * @param {NewsApiGetNewsByIdRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NewsApi
   */
  public getNewsById(requestParameters: NewsApiGetNewsByIdRequest, options?: AxiosRequestConfig) {
    return NewsApiFp(this.configuration)
      .getNewsById(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Эндпоинт для получения списка новостей с параметрами поиска
   * @summary Получение списка новостей
   * @param {NewsApiSearchNewsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NewsApi
   */
  public searchNews(requestParameters: NewsApiSearchNewsRequest, options?: AxiosRequestConfig) {
    return NewsApiFp(this.configuration)
      .searchNews(requestParameters.requestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
