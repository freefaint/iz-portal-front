/* tslint:disable */
/* eslint-disable */
/**
 * Сервис документов на ознакомление работнику
 * Сервис документов на ознакомление работнику
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface AcquaintedDocumentDto
 */
export interface AcquaintedDocumentDto {
  /**
   * Идентификатор документа
   * @type {string}
   * @memberof AcquaintedDocumentDto
   */
  id: string;
  /**
   * Название документа
   * @type {string}
   * @memberof AcquaintedDocumentDto
   */
  name: string;
  /**
   * Ознакомиться до
   * @type {string}
   * @memberof AcquaintedDocumentDto
   */
  getAcquaintedTill: string;
  /**
   * Название документа, если было совпадение с query
   * @type {string}
   * @memberof AcquaintedDocumentDto
   */
  matchedName?: string;
  /**
   * Дата публикации документа
   * @type {string}
   * @memberof AcquaintedDocumentDto
   */
  date: string;
  /**
   * Дата ознакомления
   * @type {string}
   * @memberof AcquaintedDocumentDto
   */
  acquaintedDate?: string;
  /**
   * Документ просмотрен
   * @type {boolean}
   * @memberof AcquaintedDocumentDto
   */
  viewed: boolean;
}
/**
 *
 * @export
 * @interface DocumentDto
 */
export interface DocumentDto {
  /**
   * Название документа
   * @type {string}
   * @memberof DocumentDto
   */
  name: string;
  /**
   * Ознакомиться до
   * @type {string}
   * @memberof DocumentDto
   */
  getAcquaintedTill: string;
  /**
   *
   * @type {FileDto}
   * @memberof DocumentDto
   */
  file: FileDto;
}
/**
 * Файл документа
 * @export
 * @interface FileDto
 */
export interface FileDto {
  /**
   * Имя прилагаемого файла с расширением
   * @type {string}
   * @memberof FileDto
   */
  name: string;
  /**
   * Тип прилагаемого файла
   * @type {string}
   * @memberof FileDto
   */
  mimeType: string;
  /**
   * Длина прилагаемого файла
   * @type {string}
   * @memberof FileDto
   */
  fileSize?: string;
  /**
   * Прилагаемый исполнителем файл
   * @type {string}
   * @memberof FileDto
   */
  fileData?: string;
}
/**
 *
 * @export
 * @interface PublishedDocumentDto
 */
export interface PublishedDocumentDto {
  /**
   * Идентификатор документа
   * @type {string}
   * @memberof PublishedDocumentDto
   */
  id: string;
  /**
   * Название документа
   * @type {string}
   * @memberof PublishedDocumentDto
   */
  name: string;
  /**
   * Ознакомиться до
   * @type {string}
   * @memberof PublishedDocumentDto
   */
  getAcquaintedTill: string;
  /**
   *
   * @type {number}
   * @memberof PublishedDocumentDto
   */
  signedCount: number;
  /**
   *
   * @type {number}
   * @memberof PublishedDocumentDto
   */
  receiversCount: number;
}
/**
 * Документы и параметры рассылки на ознакомление.
 * @export
 * @interface SendDocsToGetAcquaintedDto
 */
export interface SendDocsToGetAcquaintedDto {
  /**
   * Документы для ознакомления
   * @type {Array<DocumentDto>}
   * @memberof SendDocsToGetAcquaintedDto
   */
  documents: Array<DocumentDto>;
  /**
   * Идентификаторы подразделениий – в адресаты включаются  работники как самого подразделения, так и всех его  дочерних
   * @type {Array<string>}
   * @memberof SendDocsToGetAcquaintedDto
   */
  orgStructureIds: Array<string>;
  /**
   * Коды должностей.
   * @type {Array<string>}
   * @memberof SendDocsToGetAcquaintedDto
   */
  positions: Array<string>;
}

/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Получение отчёта об ознакомлении с документом
     * @summary Получение отчёта об ознакомлении с документом
     * @param {string} id Идентификатор документа
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDocumentAcquaintanceStatusReport: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getDocumentAcquaintanceStatusReport', 'id', id);
      const localVarPath = `/documents/{id}/report`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Получение исходного документа
     * @summary Получение исходного документа
     * @param {string} id Идентификатор документа
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOriginalDocument: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getOriginalDocument', 'id', id);
      const localVarPath = `/documents/{id}/original`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Получение списка отправленных на ознакомление документов
     * @summary Получение списка отправленных на ознакомление документов
     * @param {string} [query] Строка поиска по названию документов
     * @param {number} [page] Номер страницы результатов поиска, начиная с 1
     * @param {number} [pageSize] Размер страницы результатов поиска
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSentToGetAcquaintedDocuments: async (
      query?: string,
      page?: number,
      pageSize?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/documents/published`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (query !== undefined) {
        localVarQueryParameter['query'] = query;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter['pageSize'] = pageSize;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Отправка документов на ознакомление
     * @summary Отправка документов на ознакомление
     * @param {SendDocsToGetAcquaintedDto} sendDocsToGetAcquaintedDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendDocumentsToGetAcquainted: async (
      sendDocsToGetAcquaintedDto: SendDocsToGetAcquaintedDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sendDocsToGetAcquaintedDto' is not null or undefined
      assertParamExists('sendDocumentsToGetAcquainted', 'sendDocsToGetAcquaintedDto', sendDocsToGetAcquaintedDto);
      const localVarPath = `/documents`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        sendDocsToGetAcquaintedDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration);
  return {
    /**
     * Получение отчёта об ознакомлении с документом
     * @summary Получение отчёта об ознакомлении с документом
     * @param {string} id Идентификатор документа
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDocumentAcquaintanceStatusReport(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDocumentAcquaintanceStatusReport(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Получение исходного документа
     * @summary Получение исходного документа
     * @param {string} id Идентификатор документа
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOriginalDocument(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getOriginalDocument(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Получение списка отправленных на ознакомление документов
     * @summary Получение списка отправленных на ознакомление документов
     * @param {string} [query] Строка поиска по названию документов
     * @param {number} [page] Номер страницы результатов поиска, начиная с 1
     * @param {number} [pageSize] Размер страницы результатов поиска
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSentToGetAcquaintedDocuments(
      query?: string,
      page?: number,
      pageSize?: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PublishedDocumentDto>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getSentToGetAcquaintedDocuments(
        query,
        page,
        pageSize,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Отправка документов на ознакомление
     * @summary Отправка документов на ознакомление
     * @param {SendDocsToGetAcquaintedDto} sendDocsToGetAcquaintedDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sendDocumentsToGetAcquainted(
      sendDocsToGetAcquaintedDto: SendDocsToGetAcquaintedDto,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sendDocumentsToGetAcquainted(
        sendDocsToGetAcquaintedDto,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = AdminApiFp(configuration);
  return {
    /**
     * Получение отчёта об ознакомлении с документом
     * @summary Получение отчёта об ознакомлении с документом
     * @param {string} id Идентификатор документа
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDocumentAcquaintanceStatusReport(id: string, options?: any): AxiosPromise<FileDto> {
      return localVarFp.getDocumentAcquaintanceStatusReport(id, options).then((request) => request(axios, basePath));
    },
    /**
     * Получение исходного документа
     * @summary Получение исходного документа
     * @param {string} id Идентификатор документа
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOriginalDocument(id: string, options?: any): AxiosPromise<FileDto> {
      return localVarFp.getOriginalDocument(id, options).then((request) => request(axios, basePath));
    },
    /**
     * Получение списка отправленных на ознакомление документов
     * @summary Получение списка отправленных на ознакомление документов
     * @param {string} [query] Строка поиска по названию документов
     * @param {number} [page] Номер страницы результатов поиска, начиная с 1
     * @param {number} [pageSize] Размер страницы результатов поиска
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSentToGetAcquaintedDocuments(
      query?: string,
      page?: number,
      pageSize?: number,
      options?: any,
    ): AxiosPromise<Array<PublishedDocumentDto>> {
      return localVarFp
        .getSentToGetAcquaintedDocuments(query, page, pageSize, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Отправка документов на ознакомление
     * @summary Отправка документов на ознакомление
     * @param {SendDocsToGetAcquaintedDto} sendDocsToGetAcquaintedDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendDocumentsToGetAcquainted(
      sendDocsToGetAcquaintedDto: SendDocsToGetAcquaintedDto,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .sendDocumentsToGetAcquainted(sendDocsToGetAcquaintedDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for getDocumentAcquaintanceStatusReport operation in AdminApi.
 * @export
 * @interface AdminApiGetDocumentAcquaintanceStatusReportRequest
 */
export interface AdminApiGetDocumentAcquaintanceStatusReportRequest {
  /**
   * Идентификатор документа
   * @type {string}
   * @memberof AdminApiGetDocumentAcquaintanceStatusReport
   */
  readonly id: string;
}

/**
 * Request parameters for getOriginalDocument operation in AdminApi.
 * @export
 * @interface AdminApiGetOriginalDocumentRequest
 */
export interface AdminApiGetOriginalDocumentRequest {
  /**
   * Идентификатор документа
   * @type {string}
   * @memberof AdminApiGetOriginalDocument
   */
  readonly id: string;
}

/**
 * Request parameters for getSentToGetAcquaintedDocuments operation in AdminApi.
 * @export
 * @interface AdminApiGetSentToGetAcquaintedDocumentsRequest
 */
export interface AdminApiGetSentToGetAcquaintedDocumentsRequest {
  /**
   * Строка поиска по названию документов
   * @type {string}
   * @memberof AdminApiGetSentToGetAcquaintedDocuments
   */
  readonly query?: string;

  /**
   * Номер страницы результатов поиска, начиная с 1
   * @type {number}
   * @memberof AdminApiGetSentToGetAcquaintedDocuments
   */
  readonly page?: number;

  /**
   * Размер страницы результатов поиска
   * @type {number}
   * @memberof AdminApiGetSentToGetAcquaintedDocuments
   */
  readonly pageSize?: number;
}

/**
 * Request parameters for sendDocumentsToGetAcquainted operation in AdminApi.
 * @export
 * @interface AdminApiSendDocumentsToGetAcquaintedRequest
 */
export interface AdminApiSendDocumentsToGetAcquaintedRequest {
  /**
   *
   * @type {SendDocsToGetAcquaintedDto}
   * @memberof AdminApiSendDocumentsToGetAcquainted
   */
  readonly sendDocsToGetAcquaintedDto: SendDocsToGetAcquaintedDto;
}

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI {
  /**
   * Получение отчёта об ознакомлении с документом
   * @summary Получение отчёта об ознакомлении с документом
   * @param {AdminApiGetDocumentAcquaintanceStatusReportRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public getDocumentAcquaintanceStatusReport(
    requestParameters: AdminApiGetDocumentAcquaintanceStatusReportRequest,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .getDocumentAcquaintanceStatusReport(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Получение исходного документа
   * @summary Получение исходного документа
   * @param {AdminApiGetOriginalDocumentRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public getOriginalDocument(requestParameters: AdminApiGetOriginalDocumentRequest, options?: AxiosRequestConfig) {
    return AdminApiFp(this.configuration)
      .getOriginalDocument(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Получение списка отправленных на ознакомление документов
   * @summary Получение списка отправленных на ознакомление документов
   * @param {AdminApiGetSentToGetAcquaintedDocumentsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public getSentToGetAcquaintedDocuments(
    requestParameters: AdminApiGetSentToGetAcquaintedDocumentsRequest = {},
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .getSentToGetAcquaintedDocuments(
        requestParameters.query,
        requestParameters.page,
        requestParameters.pageSize,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Отправка документов на ознакомление
   * @summary Отправка документов на ознакомление
   * @param {AdminApiSendDocumentsToGetAcquaintedRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public sendDocumentsToGetAcquainted(
    requestParameters: AdminApiSendDocumentsToGetAcquaintedRequest,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .sendDocumentsToGetAcquainted(requestParameters.sendDocsToGetAcquaintedDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * EmployeeApi - axios parameter creator
 * @export
 */
export const EmployeeApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Получение документа на подпись/подписанного работником
     * @summary Получение документа на подпись/подписанного работником
     * @param {string} id Идентификатор документа
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmployeeDocument: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getEmployeeDocument', 'id', id);
      const localVarPath = `/employee/documents/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Получение списка документов работника
     * @summary Получение списка документов работника
     * @param {string} [query] Строка поиска по названию документов
     * @param {number} [page] Номер страницы результатов поиска, начиная с 1
     * @param {number} [pageSize] Размер страницы результатов поиска
     * @param {'TO_GET_ACQUAINTED' | 'ACQUAINTED'} [status] Статус ознакомления с документом
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmployeeDocuments: async (
      query?: string,
      page?: number,
      pageSize?: number,
      status?: 'TO_GET_ACQUAINTED' | 'ACQUAINTED',
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/employee/documents`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (query !== undefined) {
        localVarQueryParameter['query'] = query;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter['pageSize'] = pageSize;
      }

      if (status !== undefined) {
        localVarQueryParameter['status'] = status;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Подписать ознакомление с документом
     * @summary Подписать ознакомление с документом
     * @param {string} id Идентификатор документа
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signDocumentAcquainted: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('signDocumentAcquainted', 'id', id);
      const localVarPath = `/employee/documents/{id}/acquainted`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * EmployeeApi - functional programming interface
 * @export
 */
export const EmployeeApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = EmployeeApiAxiosParamCreator(configuration);
  return {
    /**
     * Получение документа на подпись/подписанного работником
     * @summary Получение документа на подпись/подписанного работником
     * @param {string} id Идентификатор документа
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEmployeeDocument(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeeDocument(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Получение списка документов работника
     * @summary Получение списка документов работника
     * @param {string} [query] Строка поиска по названию документов
     * @param {number} [page] Номер страницы результатов поиска, начиная с 1
     * @param {number} [pageSize] Размер страницы результатов поиска
     * @param {'TO_GET_ACQUAINTED' | 'ACQUAINTED'} [status] Статус ознакомления с документом
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEmployeeDocuments(
      query?: string,
      page?: number,
      pageSize?: number,
      status?: 'TO_GET_ACQUAINTED' | 'ACQUAINTED',
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AcquaintedDocumentDto>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeeDocuments(
        query,
        page,
        pageSize,
        status,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Подписать ознакомление с документом
     * @summary Подписать ознакомление с документом
     * @param {string} id Идентификатор документа
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signDocumentAcquainted(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.signDocumentAcquainted(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * EmployeeApi - factory interface
 * @export
 */
export const EmployeeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = EmployeeApiFp(configuration);
  return {
    /**
     * Получение документа на подпись/подписанного работником
     * @summary Получение документа на подпись/подписанного работником
     * @param {string} id Идентификатор документа
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmployeeDocument(id: string, options?: any): AxiosPromise<FileDto> {
      return localVarFp.getEmployeeDocument(id, options).then((request) => request(axios, basePath));
    },
    /**
     * Получение списка документов работника
     * @summary Получение списка документов работника
     * @param {string} [query] Строка поиска по названию документов
     * @param {number} [page] Номер страницы результатов поиска, начиная с 1
     * @param {number} [pageSize] Размер страницы результатов поиска
     * @param {'TO_GET_ACQUAINTED' | 'ACQUAINTED'} [status] Статус ознакомления с документом
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmployeeDocuments(
      query?: string,
      page?: number,
      pageSize?: number,
      status?: 'TO_GET_ACQUAINTED' | 'ACQUAINTED',
      options?: any,
    ): AxiosPromise<Array<AcquaintedDocumentDto>> {
      return localVarFp
        .getEmployeeDocuments(query, page, pageSize, status, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Подписать ознакомление с документом
     * @summary Подписать ознакомление с документом
     * @param {string} id Идентификатор документа
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signDocumentAcquainted(id: string, options?: any): AxiosPromise<void> {
      return localVarFp.signDocumentAcquainted(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for getEmployeeDocument operation in EmployeeApi.
 * @export
 * @interface EmployeeApiGetEmployeeDocumentRequest
 */
export interface EmployeeApiGetEmployeeDocumentRequest {
  /**
   * Идентификатор документа
   * @type {string}
   * @memberof EmployeeApiGetEmployeeDocument
   */
  readonly id: string;
}

/**
 * Request parameters for getEmployeeDocuments operation in EmployeeApi.
 * @export
 * @interface EmployeeApiGetEmployeeDocumentsRequest
 */
export interface EmployeeApiGetEmployeeDocumentsRequest {
  /**
   * Строка поиска по названию документов
   * @type {string}
   * @memberof EmployeeApiGetEmployeeDocuments
   */
  readonly query?: string;

  /**
   * Номер страницы результатов поиска, начиная с 1
   * @type {number}
   * @memberof EmployeeApiGetEmployeeDocuments
   */
  readonly page?: number;

  /**
   * Размер страницы результатов поиска
   * @type {number}
   * @memberof EmployeeApiGetEmployeeDocuments
   */
  readonly pageSize?: number;

  /**
   * Статус ознакомления с документом
   * @type {'TO_GET_ACQUAINTED' | 'ACQUAINTED'}
   * @memberof EmployeeApiGetEmployeeDocuments
   */
  readonly status?: 'TO_GET_ACQUAINTED' | 'ACQUAINTED';
}

/**
 * Request parameters for signDocumentAcquainted operation in EmployeeApi.
 * @export
 * @interface EmployeeApiSignDocumentAcquaintedRequest
 */
export interface EmployeeApiSignDocumentAcquaintedRequest {
  /**
   * Идентификатор документа
   * @type {string}
   * @memberof EmployeeApiSignDocumentAcquainted
   */
  readonly id: string;
}

/**
 * EmployeeApi - object-oriented interface
 * @export
 * @class EmployeeApi
 * @extends {BaseAPI}
 */
export class EmployeeApi extends BaseAPI {
  /**
   * Получение документа на подпись/подписанного работником
   * @summary Получение документа на подпись/подписанного работником
   * @param {EmployeeApiGetEmployeeDocumentRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmployeeApi
   */
  public getEmployeeDocument(requestParameters: EmployeeApiGetEmployeeDocumentRequest, options?: AxiosRequestConfig) {
    return EmployeeApiFp(this.configuration)
      .getEmployeeDocument(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Получение списка документов работника
   * @summary Получение списка документов работника
   * @param {EmployeeApiGetEmployeeDocumentsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmployeeApi
   */
  public getEmployeeDocuments(
    requestParameters: EmployeeApiGetEmployeeDocumentsRequest = {},
    options?: AxiosRequestConfig,
  ) {
    return EmployeeApiFp(this.configuration)
      .getEmployeeDocuments(
        requestParameters.query,
        requestParameters.page,
        requestParameters.pageSize,
        requestParameters.status,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Подписать ознакомление с документом
   * @summary Подписать ознакомление с документом
   * @param {EmployeeApiSignDocumentAcquaintedRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmployeeApi
   */
  public signDocumentAcquainted(
    requestParameters: EmployeeApiSignDocumentAcquaintedRequest,
    options?: AxiosRequestConfig,
  ) {
    return EmployeeApiFp(this.configuration)
      .signDocumentAcquainted(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
